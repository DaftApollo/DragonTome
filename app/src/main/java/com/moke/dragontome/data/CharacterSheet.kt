package com.moke.dragontome.data

import kotlinx.serialization.Serializable

enum class CharacterClass(){
                           CUSTOM,
                           ARTIFICER,
    BARBARIAN,
    BARD,
    BLOODHUNTER,
    CLERIC,
    DRUID,
    FIGHTER,
    MONK,
    PALADIN,
    RANGER,
    ROGUE,
    SORCERER,
    WARLOCK,
    WIZARD
}

/*
* List of possible subclasses for characters. These are further broken up into individual lists for
* each class in the LevelUpHandler
* */
enum class CharacterSubClass(){
                              CUSTOM,
    ALCHEMIST,
    ARMORER,
    ARTILLERIST,
    BATTLE_SMITH,
    ANCESTRAL_GUARDIAN,
    BATTLERAGER,
    BEAST,
    BERSERKER,
    GIANT,
    STORM_HERALD,
    TOTEM_WARRIOR,
    WILD_MAGIC_BARBARIAN,
    ZEALOT,
    CREATION,
    ELOQUENCE,
    GLAMOUR,
    LORE,
    SPIRITS,
    SWORDS,
    VALOR,
    WHISPERS,
    GHOSTSLAYER,
    LYCAN,
    MUTANT,
    PROFANE_SOUL,
    ARCANA,
    DEATH,
    FORGE,
    GRAVE,
    KNOWLEDGE,
    LIFE,
    LIGHT,
    NATURE,
    ORDER,
    PEACE,
    TEMPEST,
    TRICKERY,
    TWILIGHT,
    WAR,
    DREAMS,
    LAND,
    MOON,
    SHEPHERD,
    SPORES,
    STARS,
    WILDFIRE,
    ARCANE_ARCHER,
    BANNERET,
    BATTLE_MASTER,
    CAVALIER,
    CHAMPION,
    ECHO_KNIGHT,
    ELDRITCH_KNIGHT,
    PSI_WARRIOR,
    RUNE_KNIGHT,
    SAMURAI,
    ASTRAL_SELF,
    ASCENDANT_DRAGON,
    DRUNKEN_MASTER,
    FOUR_ELEMENTS,
    KENSEI,
    LONG_DEATH,
    MERCY,
    OPEN_HAND,
    SHADOW,
    SUN_SOUL,
    ANCIENTS,
    CONQUEST,
    CROWN,
    DEVOTION,
    GLORY,
    REDEMPTION,
    VENGEANCE,
    WATCHERS,
    OATHBREAKER,
    BEAST_MASTER,
    FEY_WANDERER,
    GLOOM_STALKER,
    HORIZON_WALKER,
    HUNTER,
    MONSTER_SLAYER,
    SWARMKEEPER,
    DRAKEWARDEN,
    ARCANE_TRICKSTER,
    ASSASSIN,
    INQUSITIVE,
    MASTERMIND,
    PHANTOM,
    SCOUT,
    SOULKNIFE,
    SWASHBUCKLER,
    THIEF,
    ABERRANT_MIND,
    CLOCKWORD_SOUL,
    DRACONIC_BLOODLINE,
    DIVINE_SOUL,
    LUNAR_SORCERY,
    SHADOW_MAGIC,
    STORM_SORCERY,
    WILD_MAGIC_SORCERER,
    ARCHFEY,
    CELESTIAL,
    FATHOMLESS,
    FIEND,
    GENIE,
    GREAT_OLD_ONE,
    HEXBLADE,
    UNDEAD,
    UNDYING,
    ABJURATION,
    BLADESINGING,
    CHRONURGY,
    CONJURATION,
    DIVINATION,
    ENCHANTMENT,
    EVOCATION,
    GRAVITURGY,
    ILLUSION,
    NECROMANCY,
    ORDER_OF_SCRIBES,
    TRANSMUTATION,
    WAR_MAGIC
}


enum class CharacterStat(){
    STRENGTH,
    DEXTERITY,
    CONSTITUTION,
    INTELLIGENCE,
    WISDOM,
    CHARISMA
}

@Serializable
data class CharacterSheet(
    //Basic Info
    var charName: String = "",
    var race: String = "",
    var background: String = "",
    var characterAlignment: String = "",
    var experiencePoints: Int = 0,

    var characterClass: List<ClassLevel> = emptyList(),

    var characterPersonalityTraits: StringListWrapper = StringListWrapper(),
    var characterIdeals: StringListWrapper = StringListWrapper(),
    var characterBonds: StringListWrapper = StringListWrapper(),
    var characterFlaws: StringListWrapper = StringListWrapper(),
    var characterFeaturesAndTraits: FeatureStringListWrapper = FeatureStringListWrapper(),
    var inspirationPoints: IntWrapper = IntWrapper(value = 0),
    var proficiencyBonus: StatList  = StatList(),
    var armorClass: StatList = StatList(),
    var initiative: StatList  = StatList(),
    var speed: StatList  = StatList(),
    var hitDice: String = "",
    var hitPointCurrent: IntWrapper = IntWrapper(value = 0),
    var hitpointMax: StatList = StatList(),
    var tempHitPoints: IntWrapper = IntWrapper(value = 0),
    var strength: StatList = StatList(),
    var strengthBonus: StatList = StatList(),
    var dexterity: StatList = StatList(),
    var dexterityBonus: StatList = StatList(),
    var constitution: StatList = StatList(),
    var constitutionBonus: StatList = StatList(),
    var intelligence: StatList = StatList(),
    var intelligenceBonus: StatList = StatList(),
    var wisdom: StatList = StatList(),
    var wisdomBonus: StatList = StatList(),
    var charisma: StatList = StatList(),
    var charismaBonus: StatList = StatList(),

    var attacks: List<Attack> = emptyList(),
    var equipment: StringListWrapper = StringListWrapper(),
    var proficenciesAndLanguages: StringListWrapper = StringListWrapper(),

    //Currency
    var copperPieces:IntWrapper = IntWrapper(value = 0),
    var silverPieces:IntWrapper = IntWrapper(value = 0),
    var electrumPieces:IntWrapper = IntWrapper(value = 0),
    var goldPieces:IntWrapper = IntWrapper(value = 0),
    var platinumPieces:IntWrapper = IntWrapper(value = 0),

    //Saving Throws
    var strengthSavingThrow: StatListWithProficiency = StatListWithProficiency(),
    var dexteritySavingThrow: StatListWithProficiency = StatListWithProficiency(),
    var constitutionSavingThrow: StatListWithProficiency = StatListWithProficiency(),
    var intelligenceSavingThrow: StatListWithProficiency = StatListWithProficiency(),
    var wisdomSavingThrow: StatListWithProficiency = StatListWithProficiency(),
    var charismaSavingThrow: StatListWithProficiency = StatListWithProficiency(),

    //Skills
    var acrobatics: StatListWithProficiency = StatListWithProficiency(),
    var animalhandling: StatListWithProficiency = StatListWithProficiency(),
    var arcana: StatListWithProficiency = StatListWithProficiency(),
    var athletics:StatListWithProficiency = StatListWithProficiency(),
    var deception: StatListWithProficiency = StatListWithProficiency(),
    var history: StatListWithProficiency = StatListWithProficiency(),
    var insight: StatListWithProficiency = StatListWithProficiency(),
    var intimidation: StatListWithProficiency = StatListWithProficiency(),
    var investigation: StatListWithProficiency = StatListWithProficiency(),
    var medicine: StatListWithProficiency = StatListWithProficiency(),
    var nature: StatListWithProficiency = StatListWithProficiency(),
    var perception: StatListWithProficiency = StatListWithProficiency(),
    var performance: StatListWithProficiency = StatListWithProficiency(),
    var persuasion: StatListWithProficiency = StatListWithProficiency(),
    var religion: StatListWithProficiency = StatListWithProficiency(),
    var slightOfHand: StatListWithProficiency = StatListWithProficiency(),
    var stealth: StatListWithProficiency = StatListWithProficiency(),
    var survival: StatListWithProficiency = StatListWithProficiency(),
    var passivePerception: StatList = StatList(),

    //Appearance:
    var age:String = "",
    var height: String = "",
    var weight: String = "",
    var eyes: String = "",
    var skin: String = "",
    var hair: String = "",
    //Had a to do here to implement an image for each character, but user-uploaded images are confusing, man.

    var alliesAndOrganizations: StringListWrapper = StringListWrapper(),
    var characterBackstory: StringListWrapper = StringListWrapper(),

    var treasure: StringListWrapper = StringListWrapper(),

    var spellCastingClass: CharacterClass? = null,
    var spellCastingAbility: CharacterStat = CharacterStat.INTELLIGENCE,
    var spellSaveDC: StatList = StatList(),
    var spellAttackBonus: StatList = StatList(),

    var spellBook: SpellBook = SpellBook()
)
